import sys
import os

max_len = 10

test_text = \
"""Step: 4984795, IP: 0xE69F, data: 0xAC 0x32 0xC4 0x75 0x25 0x8A
Step: 4984796, IP: 0xE6A0, data: 0x32 0xC4 0x75 0x25 0x8A 0xC2
Step: 4984797, IP: 0xE6A2, data: 0x75 0x25 0x8A 0xC2 0xAA 0xE2
Step: 4984798, IP: 0xE6A4, data: 0x8A 0xC2 0xAA 0xE2 0xF6 0x22
Step: 4984799, IP: 0xE6A6, data: 0xAA 0xE2 0xF6 0x22 0xE4 0x74
Step: 4984800, IP: 0xE6A7, data: 0xE2 0xF6 0x22 0xE4 0x74 0x16
Step: 4984801, IP: 0xE69F, data: 0xAC 0x32 0xC4 0x75 0x25 0x8A
Step: 4984802, IP: 0xE6A0, data: 0x32 0xC4 0x75 0x25 0x8A 0xC2
Step: 4984803, IP: 0xE6A2, data: 0x75 0x25 0x8A 0xC2 0xAA 0xE2
Step: 4984804, IP: 0xE6A4, data: 0x8A 0xC2 0xAA 0xE2 0xF6 0x22
Step: 4984805, IP: 0xE6A6, data: 0xAA 0xE2 0xF6 0x22 0xE4 0x74
Step: 4984806, IP: 0xE6A7, data: 0xE2 0xF6 0x22 0xE4 0x74 0x16
Step: 4984807, IP: 0xE69F, data: 0xAC 0x32 0xC4 0x75 0x25 0x8A
Step: 4984808, IP: 0xE6A0, data: 0x32 0xC4 0x75 0x25 0x8A 0xC2
Step: 4984809, IP: 0xE6A2, data: 0x75 0x25 0x8A 0xC2 0xAA 0xE2
Step: 4984810, IP: 0xE6A4, data: 0x8A 0xC2 0xAA 0xE2 0xF6 0x22
Step: 4984811, IP: 0xE6A6, data: 0xAA 0xE2 0xF6 0x22 0xE4 0x74
Step: 4984812, IP: 0xE6A7, data: 0xE2 0xF6 0x22 0xE4 0x74 0x16
Step: 4984813, IP: 0xE69F, data: 0xAC 0x32 0xC4 0x75 0x25 0x8A
Step: 4984814, IP: 0xE6A0, data: 0x32 0xC4 0x75 0x25 0x8A 0xC2
Step: 4984815, IP: 0xE6A2, data: 0x75 0x25 0x8A 0xC2 0xAA 0xE2
Step: 4984816, IP: 0xE6A4, data: 0x8A 0xC2 0xAA 0xE2 0xF6 0x22
Step: 4984817, IP: 0xE6A6, data: 0xAA 0xE2 0xF6 0x22 0xE4 0x74
Step: 4984818, IP: 0xE6A7, data: 0xE2 0xF6 0x22 0xE4 0x74 0x16
Step: 4984819, IP: 0xE69F, data: 0xAC 0x32 0xC4 0x75 0x25 0x8A
Step: 4984820, IP: 0xE6A0, data: 0x32 0xC4 0x75 0x25 0x8A 0xC2
Step: 4984821, IP: 0xE6A2, data: 0x75 0x25 0x8A 0xC2 0xAA 0xE2
Step: 4984822, IP: 0xE6A4, data: 0x8A 0xC2 0xAA 0xE2 0xF6 0x22
Step: 4984823, IP: 0xE6A6, data: 0xAA 0xE2 0xF6 0x22 0xE4 0x74
Step: 4984824, IP: 0xE6A7, data: 0xE2 0xF6 0x22 0xE4 0x74 0x16
Step: 4984824, IP: 0xE622, data: 0xE2 0xF6 0x22 0xE4 0x74 0x16
Step: 4984824, IP: 0xE6A7, data: 0xE2 0xF6 0x22 0xE4 0x74 0x16
Step: 4984824, IP: 0xE6A7, data: 0xE2 0xF6 0x22 0xE4 0x74 0x16
Step: 4984824, IP: 0xE6A7, data: 0xE2 0xF6 0x22 0xE4 0x74 0x16
Step: 4984824, IP: 0xE6A7, data: 0xE2 0xF6 0x22 0xE4 0x74 0x16
Step: 4984824, IP: 0xE6A7, data: 0xE2 0xF6 0x22 0xE4 0x74 0x16
Step: 4984824, IP: 0xE6A7, data: 0xE2 0xF6 0x22 0xE4 0x74 0x16
Step: 4984824, IP: 0xE6A7, data: 0xE2 0xF6 0x22 0xE4 0x74 0x16
Step: 4984824, IP: 0xE6A7, data: 0xE2 0xF6 0x22 0xE4 0x74 0x16
Step: 4984824, IP: 0xE6A7, data: 0xE2 0xF6 0x22 0xE4 0x74 0x16
Step: 4984824, IP: 0xE6A7, data: 0xE2 0xF6 0x22 0xE4 0x74 0x16"""


def find_reps(arr, idx, num_lines):
    count = 0
    for i in range(0, len(arr) - (idx + num_lines - 1), num_lines):
        for j in range(num_lines):
            if arr[idx+i+j] != arr[idx+j]:
                return count
        count += 1
    return count


def main(logfile):
    with open(logfile) as f:
        lines = f.read().split('\n')
    # lines = test_text.split('\n')
    print(f"Processing {len(lines)} lines . . .")
    new_lines = []
    for line in lines:
        if 'IP: ' in line:
            new_lines.append(line.split('IP: ')[1])
        else:
            new_lines.append(line)
    clean_lines = []
    i = 0
    percent = int(len(lines) / 100)
    counter = 0
    while i < len(new_lines):
        if percent > 0:
            if (i/percent) > counter:
                print(f"Processed {counter}%")
                counter += 1
        best_len = 1
        best_count = 1
        for j in range(1, max_len):
            count = find_reps(new_lines, i, j)
            if j == 1:
                best_count = count
            if j > 1 and count > 1:
                if j * count > best_len * best_count:
                    best_count = count
                    best_len = j
        # print(f"{best_count = }, {best_len = }")
        if best_len * best_count > 1:
            clean_lines.append("{{{")
            for j in range(best_len):
                clean_lines.append(f" {lines[i+j]}")
            clean_lines.append(f" [x{best_count} times]")
            for j in range(best_len):
                clean_lines.append(f" {lines[i+((best_count-1)*best_len)+j]}")
            clean_lines.append("}}}")
        else:
            clean_lines.append(lines[i])
        i += best_count * best_len
    # print('\n'.join(clean_lines))
    # Get the directory path
    directory_path = os.path.dirname(logfile)

    # Get the file name with extension
    file_name_with_extension = os.path.basename(logfile)

    # Split the file name and extension
    file_name, file_extension = os.path.splitext(file_name_with_extension)
    if directory_path:
        clear_fname = f"{directory_path}/{file_name}_clear{file_extension}"
    else:
        clear_fname = f"{file_name}_clear{file_extension}"
    with open(clear_fname, 'w') as f:
        f.write('\n'.join(clean_lines))
    print("done")



    

if __name__ == "__main__":
    if len(sys.argv) >= 2:
        main(sys.argv[1])